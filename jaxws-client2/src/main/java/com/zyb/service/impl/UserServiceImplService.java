package com.zyb.service.impl;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.3.7
 * 2020-09-22T11:37:19.164+08:00
 * Generated source version: 3.3.7
 *
 */
@WebServiceClient(name = "UserServiceImplService",
                  wsdlLocation = "http://localhost:8000/jaxws_server?wsdl",
                  targetNamespace = "http://impl.service.zyb.com/")
public class UserServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.service.zyb.com/", "UserServiceImplService");
    public final static QName UserServiceImplPort = new QName("http://impl.service.zyb.com/", "UserServiceImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8000/jaxws_server?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UserServiceImplService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://localhost:8000/jaxws_server?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public UserServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UserServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UserServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public UserServiceImplService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public UserServiceImplService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public UserServiceImplService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns UserService
     */
    @WebEndpoint(name = "UserServiceImplPort")
    public UserService getUserServiceImplPort() {
        return super.getPort(UserServiceImplPort, UserService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserService
     */
    @WebEndpoint(name = "UserServiceImplPort")
    public UserService getUserServiceImplPort(WebServiceFeature... features) {
        return super.getPort(UserServiceImplPort, UserService.class, features);
    }

}
